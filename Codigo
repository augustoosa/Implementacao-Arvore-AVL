#include <stdio.h>
#include <stdlib.h>


//______________________STRUCTs______________________//
typedef struct no{
	struct no *esq;
	struct no *dir;
	int valor;
	int altura;
} No;

//______________________CABECALHO DE FUNCOES______________________//
No* Cria_no(int numero);
No* inserir_no(No* raiz, int numero);
No* balancear(No* no);
int atualizarAltura(No* no);
int Maior_Altura(int h1, int h2);
int Altura_no(No *no);
int Fator_B(No *no);
void liberarArvore(No* no);
No* RSE(No *p);
No* RSD(No *p);
No* RDE(No *p);
No* RDD(No *p);
No *encontraDesbalanceamento(No *raiz);

//______________________FUNCOES______________________//

//----------------------FUNÇÕES DE ROTAÇÃO-----------------------//
int atualizarAltura(No *raiz){
	if(raiz == NULL) return 0;
	int grau1 = atualizarAltura(raiz->esq);
	int grau2 = atualizarAltura(raiz->dir);
	int maiorGrau = grau1 > grau2 ? grau1 : grau2;
	raiz->altura = maiorGrau;
	return maiorGrau + 1;
}

No *encontraDesbalanceamento(No *raiz){
	if(raiz == NULL) return NULL;
	No *subRaizEsq = encontraDesbalanceamento(raiz->esq);
	No *subRaizDir = encontraDesbalanceamento(raiz->dir);
	if(subRaizEsq != NULL) return subRaizEsq;
	if(subRaizDir != NULL) return subRaizDir;
	int alturaEsq = raiz->esq ? raiz->esq->altura : -1;
	int alturaDir = raiz->dir ? raiz->dir->altura : -1;
	int diferencaDeAltura = alturaEsq - alturaDir;
	if(diferencaDeAltura == 2 || diferencaDeAltura == -2) return raiz;
	return NULL;
}
    

//1. Função que realiza rotação simples à esquerda
No* RSE(No *p) {
	No *u, *t1;
	u = p->dir;
	t1 = u->esq;
	u->esq = p;
	p->dir = t1;
	return u;
}
//2. Função que realiza rotação simples à direita
No* RSD(No *p) {
	No *u, *t1;
	u = p->esq;
	t1 = u->dir;
	u->dir = p;
	p->esq = t1;
	return u;
}
//3. Função que realiza rotação dupla à direita
No *RDD(No *p) {
	p->esq = RSE(p->esq);
	No *v = RSD(p);
	return v;
}
No *RDE(No *p) {
	p->dir = RSD(p->dir);
	No *v = RSE(p);
	return v;
}


//----------------------FUNCOES PRINCIPAIS----------------------//
//1. cria um novo nó
No* Cria_no(int numero){
	No *novo_no = malloc(sizeof(No));
    
	if(novo_no){
    	novo_no->valor=numero;
    	novo_no->esq=NULL;
    	novo_no->dir=NULL;
    	novo_no->altura=1;
	}
	return novo_no;
}

//2. insere o nó na arvore
No* inserir_no(No* raiz, int numero) {
    
	if (raiz == NULL) {
    	return Cria_no(numero);
	}
	else {
    	if (numero < raiz->valor)
        	raiz->esq = inserir_no(raiz->esq, numero);
    	else
        	raiz->dir = inserir_no(raiz->dir, numero);
	}
	// Recalcula a altura de todos os nós entre a raiz e o novo nó inserido.
	atualizarAltura(raiz);
    
	//rebalancea a raiz após inserir;
	if(encontraDesbalanceamento(raiz) != NULL) {
    	raiz=balancear(raiz);
	}

	return raiz;
}

//3. Balanceia a arvore
No *balancear(No *raiz){
	if(raiz==NULL) return NULL;
	No *esq = balancear(raiz->esq);
	No *dir = balancear(raiz->dir);
	raiz->esq = esq;
	raiz->dir = dir;
	int fator_b = Fator_B(raiz);
	// Rotação simples à esquerda
	if (fator_b < -1 && Fator_B(raiz->dir) <= 0){
    	printf("RSE %d\n", raiz->valor);
    	raiz = RSE(raiz);
	}
	// Rotação simples à direita
	else if (fator_b > 1 && Fator_B(raiz->esq) >= 0){
    	printf("RSD %d\n", raiz->valor);
    	raiz = RSD(raiz);
	}
	// Rotação dupla à direita
	else if (fator_b > 1 && Fator_B(raiz->esq) < 0){
    	printf("RDD %d\n", raiz->valor);
    	raiz = RDD(raiz);
	}
	// Rotação dupla à esquerda
	else if (fator_b < -1 && Fator_B(raiz->dir) > 0){
    	printf("RDE %d\n", raiz->valor);
    	raiz = RDE(raiz);
	}
	atualizarAltura(raiz);
	return raiz;
}

//5. Calcula e retorna o fator de balanceamento
int Fator_B(No *no){
	int fator=0;
	if(no==NULL){
    	return 0;
	}
	else{
    	fator= Altura_no(no->esq) - Altura_no(no->dir);
    	return fator;
	}
   	 
}


//----------------------FUNCOES AUXILIARES----------------------//
//1. retorna a maior altura
int Maior_Altura(int h1, int h2){
	if(h1>h2)
    	return h1;
	else
    	return h2;
}

//2. retorna altura de um nó (ou -1 caso o nó for nulo)
int Altura_no(No *no){
	if(no==NULL)
    	return -1;
	else
    	return no->altura;
}

//Apaga a árvore da memória
void liberarArvore(No* no) {
	if (no) {
    	liberarArvore(no->esq);
    	liberarArvore(no->dir);
    	free(no);
	}
}

//_________________________MAIN_________________________//


int main(){
	No* raiz = NULL;
	int valor;
    
	while(1){
    	scanf("%d", &valor);
    	if (valor == -1) {
        	printf("fim\n");
        	break;
    	}

    	if (valor > 0) {
        	raiz = inserir_no(raiz,valor);
    	}

    	if (valor == 0) {
        	int bal = Fator_B(raiz);
        	printf("Bal = %d\n", bal);
        	liberarArvore(raiz);
        	raiz = NULL;
    	}
	}
}

